# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET		/aboutplay           				controllers.Application.aboutPlay()
GET		/                    				controllers.Application.index()

####   Authentication & Authorization   ####
POST	/authentication/login 				controllers.Authentication.login()
#TODO: check if really necesarry as we will be using fbLogin
POST	/authentication/logout      		controllers.Authentication.logout() 
GET		/user 				 				controllers.UserController.readCurrent()
PUT		/user 				 				controllers.UserController.updateCurrent()
GET		/userId 							controllers.UserController.readCurrentId()
GET		/users 				 				controllers.UserController.readAll()
DELETE	/user/:id							controllers.UserController.delete(id: Long)

####   Seller   ####
GET		/seller 	 						controllers.SellerController.readCurrent()
PUT		/seller 							controllers.SellerController.createOrUpdateCurrent()
GET     /seller/:sellerId	     			controllers.SellerController.findSellerById(sellerId: Long)
GET     /seller/:sellerId/items  	    	controllers.SellerController.itemsOwnedBy(sellerId: Long)
GET     /seller/:sellerId/collections     	controllers.SellerController.listCollections(sellerId: Long)

####   Buyer   ####
GET 	/buyer 								controllers.BuyerController.readCurrent()
PUT 	/buyer 								controllers.BuyerController.createOrUpdateCurrent()
POST	/buyer/openDispute/					controllers.BuyerController.openDispute(buyOrder: Long, disputeMessage: String)
POST	/buyer/confirmReception/			controllers.BuyerController.confirmReception(buyOrder: Long)
GET		/buyer/pay							controllers.BuyerController.payOrder()


####   Items - Garments   ####
# API
GET		/garment							controllers.ItemController.readAll()
GET		/garment/:itemId					controllers.ItemController.read(itemId: String)
DELETE	/garment/:itemId					controllers.ItemController.delete(itemId: String)
PUT		/garment/:itemId					controllers.ItemController.createOrUpdate(itemId: String)
GET 	/recommendedItems					controllers.ItemController.getItemsByList()
# UI
GET		/garment/new						controllers.ItemController.form()
POST	/garment/							controllers.ItemController.submit()


# Wishlist
####   Items - Garments   ####
GET		/wishlist							controllers.WishlistController.userWishlistItems()
POST	/wishlist							controllers.WishlistController.addItemToWishlist()
DELETE	/wishlist/:itemId					controllers.WishlistController.removeItemFromWishlist(itemId: String)




# Dashboard
GET		/littleItemsStock/:sellerId			controllers.DashboardController.littleItemsStock(sellerId: Long)
GET		/biggestCollections/:sellerId		controllers.DashboardController.biggestCollections(sellerId: Long)
GET		/itemsViewedFromCollections/:sellerId/:actionDateBegin/:actionDateEnd		controllers.DashboardController.itemsViewedFromCollections(sellerId: Long, actionDateBegin: Long, actionDateEnd: Long)

# Actions
GET		/actions/:order/:sellerId/:actionDateBegin/:actionDateEnd/:actionType		controllers.ActionController.actionsFrom(order: Long, sellerId: Long, actionDateBegin: Long, actionDateEnd: Long, actionType: String)

# Buyer Profile
GET		/buyerProfile			controllers.BuyerController.profile()

# Recommendations
GET     /reco	           					controllers.RecommendationEngine.recoExample()

# Collections
GET		/collection							controllers.CollectionController.form()
POST	/collection							controllers.CollectionController.submit()
GET		/collection/:collectionId			controllers.CollectionController.delete(collectionId: Long)
GET		/collection/:itemId/item			controllers.CollectionController.deleteCollectionId(itemId: String)
GET		/collection/:collectionId/:collectionTitle/:collectionDescription		controllers.CollectionController.update(collectionId: Long, collectionTitle: String, collectionDescription: String)
GET		/collection/:collectionId/collections									controllers.CollectionController.getItemsFromCollection(collectionId: Long)
GET		/collection/:sellerId/items			controllers.CollectionController.getItemsWithNoCollection(sellerId: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file        				controllers.Assets.at(path="/public", file)
GET		/javascriptRoutes     				controllers.Application.javascriptRoutes

# Payment Process
GET		/buy				controllers.ItemController.buy()
POST	/orderItem					controllers.ItemController.orderItem(itemId: String, size: String, pointsUsed: Integer)
GET 	/payment/success/:orderId 	controllers.Payment.success(orderId:Long)
GET 	/payment/error/:orderId 	controllers.Payment.error(orderId:Long)

